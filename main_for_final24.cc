#include <algorithm>
#include <array>
#include <fstream>
#include <iostream>
#include <vector>
#include <ctime>
#include <ODLA/odla.h>
#include <thread>

#include "model.h"

using namespace std;

#define TOTAL_DATA_NUM 2000

struct Float {
  // TODO(unknown): no infinity, underflow/overflow handling.
  Float() = delete;
  static constexpr int BitsPerByte = 8;
  template <typename T, int exp, int mantissa>
  static std::array<int, 3> Extract(T x) {
    static_assert(exp + mantissa + 1 == sizeof(T) * BitsPerByte);
    int sign = x >> (exp + mantissa);
    int m = x & ((1 << mantissa) - 1);
    int e = (x >> mantissa) & ((1 << exp) - 1);
    return {sign, e, m};
  }

  template <typename T, int exp, int mantissa>
  static T Combine(int sign, int e, int m) {
    static_assert(exp + mantissa + 1 == sizeof(T) * BitsPerByte);
    T x{0};
    x = sign ? 1U << (exp + mantissa) : 0;
    m >>= 32 - mantissa;
    x |= m & ((1U << mantissa) - 1);
    x |= (e & ((1U << exp) - 1)) << mantissa;
    return x;
  }
  static constexpr int FP32Exp = 8;
  static constexpr int FP32Mantissa = 23;
  static constexpr int FP32ExpBias = 127;
  static constexpr int FP16Exp = 5;
  static constexpr int FP16Mantissa = 10;
  static constexpr int FP16ExpBias = 15;

  static float GetFP32(uint16_t x) {
    auto components = Extract<uint16_t, FP16Exp, FP16Mantissa>(x);
    components[1] -= FP16ExpBias;
    components[2] <<= 32 - FP16Mantissa;
    // Underflow.
    if (components[1] == -FP16ExpBias) {
      while (components[2] > 0) {
        --components[1];
        components[2] <<= 1;
      }
      components[2] <<= 1;
    }
    return GetFP32(components[0], components[1], components[2]);
  }

  static float GetFP32(uint8_t sign, int32_t e, uint32_t m) {
    uint32_t x =
        Combine<uint32_t, FP32Exp, FP32Mantissa>(sign, e + FP32ExpBias, m);
    return *(reinterpret_cast<float*>(&x)); // NOLINT.
  }
};

struct in_out_data{
  std::array<unsigned int, 384*6>* indices;
  std::array<unsigned int, 384*6>* input_mask;
  std::array<unsigned int, 384*6>* positions;
  std::array<unsigned int, 384*6>* segments;
  std::array<odla_float16, 384*2*6>* out_Squad_Gemm;
};

void prepare_one_data(in_out_data* one_data){
  static int data_index = 0;
  static std::array<unsigned int, 384*6>* indices = nullptr;
  static std::array<unsigned int, 384*6>* input_mask = nullptr;
  static std::array<unsigned int, 384*6>* positions = nullptr;
  static std::array<unsigned int, 384*6>* segments = nullptr;
  if(0 == data_index++) //only one inputs copy
  {
    indices = new std::array<unsigned int, 384*6>({101,  2054,  3609,  2001,  2109,  2000, 17902,  1996, 12951,
        5315,  1997,  1996,  3565,  4605,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,   101,  2029,  5088,  2136,  3421,  1996,
      22309,  2012,  3565,  4605,  2753,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,101,  2054,  3609,  2001,  2109,  2000, 17902,  1996, 12951,
        5315,  1997,  1996,  3565,  4605,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,   101,  2029,  5088,  2136,  3421,  1996,
      22309,  2012,  3565,  4605,  2753,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,101,  2054,  3609,  2001,  2109,  2000, 17902,  1996, 12951,
        5315,  1997,  1996,  3565,  4605,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,   101,  2029,  5088,  2136,  3421,  1996,
      22309,  2012,  3565,  4605,  2753,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,101,  2054,  3609,  2001,  2109,  2000, 17902,  1996, 12951,
        5315,  1997,  1996,  3565,  4605,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,   101,  2029,  5088,  2136,  3421,  1996,
      22309,  2012,  3565,  4605,  2753,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,101,  2054,  3609,  2001,  2109,  2000, 17902,  1996, 12951,
        5315,  1997,  1996,  3565,  4605,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,   101,  2029,  5088,  2136,  3421,  1996,
      22309,  2012,  3565,  4605,  2753,  1029,   102,  3565,  4605,
        2753,  2001,  2019,  2137,  2374,  2208,  2000,  5646,  1996,
        3410,  1997,  1996,  2120,  2374,  2223,  1006,  5088,  1007,
        2005,  1996,  2325,  2161,  1012,  1996,  2137,  2374,  3034,
        1006, 10511,  1007,  3410,  7573, 14169,  3249,  1996,  2120,
        2374,  3034,  1006, 22309,  1007,  3410,  3792, 12915,  2484,
        1516,  2184,  2000,  7796,  2037,  2353,  3565,  4605,  2516,
        1012,  1996,  2208,  2001,  2209,  2006,  2337,  1021,  1010,
        2355,  1010,  2012, 11902,  1005,  1055,  3346,  1999,  1996,
        2624,  3799,  3016,  2181,  2012,  4203, 10254,  1010,  2662,
        1012,  2004,  2023,  2001,  1996, 12951,  3565,  4605,  1010,
        1996,  2223, 13155,  1996,  1000,  3585,  5315,  1000,  2007,
        2536,  2751,  1011, 11773, 11107,  1010,  2004,  2092,  2004,
        8184, 28324,  2075,  1996,  4535,  1997, 10324,  2169,  3565,
        4605,  2208,  2007,  3142, 16371, 28990,  2015,  1006,  2104,
        2029,  1996,  2208,  2052,  2031,  2042,  2124,  2004,  1000,
        3565,  4605,  1048,  1000,  1007,  1010,  2061,  2008,  1996,
        8154,  2071, 14500,  3444,  1996,  5640, 16371, 28990,  2015,
        2753,  1012,   102,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0,     0,     0,     0,
          0,     0,     0,     0,     0,     0});
    input_mask = new std::array<unsigned int, 384*6>({0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2});
    positions = new std::array<unsigned int, 384*6>(
      {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
    13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
    26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
    39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
    52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
    65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
    78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
    91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
  104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
  130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
  143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
  156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
  169, 170, 171, 172, 173,   0,   1,   2,   3,   4,   5,   6,   7,
    8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
    21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
    34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,
    47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
    60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
    73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,
    86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
    99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
  125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
  138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
  151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
  164, 165, 166, 167, 168, 169, 170,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
    13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
    26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
    39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
    52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
    65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
    78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
    91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
  104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
  130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
  143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
  156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
  169, 170, 171, 172, 173,   0,   1,   2,   3,   4,   5,   6,   7,
    8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
    21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
    34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,
    47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
    60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
    73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,
    86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
    99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
  125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
  138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
  151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
  164, 165, 166, 167, 168, 169, 170,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
    13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
    26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
    39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
    52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
    65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
    78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
    91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
  104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
  130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
  143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
  156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
  169, 170, 171, 172, 173,   0,   1,   2,   3,   4,   5,   6,   7,
    8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
    21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
    34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,
    47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
    60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
    73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,
    86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
    99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
  125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
  138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
  151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
  164, 165, 166, 167, 168, 169, 170,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
    13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
    26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
    39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
    52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
    65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
    78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
    91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
  104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
  130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
  143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
  156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
  169, 170, 171, 172, 173,   0,   1,   2,   3,   4,   5,   6,   7,
    8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
    21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
    34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,
    47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
    60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
    73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,
    86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
    99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
  125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
  138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
  151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
  164, 165, 166, 167, 168, 169, 170,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
    13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
    26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
    39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
    52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
    65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
    78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
    91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
  104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
  130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
  143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
  156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
  169, 170, 171, 172, 173,   0,   1,   2,   3,   4,   5,   6,   7,
    8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
    21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
    34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,
    47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
    60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
    73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,
    86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
    99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
  125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
  138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
  151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
  164, 165, 166, 167, 168, 169, 170,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0});
    segments = new std::array<unsigned int, 384*6>(
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
  }

  one_data->indices = indices;
  one_data->input_mask = input_mask;
  one_data->positions = positions;
  one_data->segments = segments;
  //multiple output copy
  one_data->out_Squad_Gemm = new std::array<odla_float16, 384*2*6>();
  std::cout << "[ " << data_index << " ] prepared for the test ..." << std::endl;
}
static in_out_data* all_data = nullptr;

void prepare_data()
{
  all_data = new in_out_data[TOTAL_DATA_NUM];
  for(int i=0; i < TOTAL_DATA_NUM; i++)
    prepare_one_data(all_data+i);
  //Check the size of the first & last data
  std::cout << "First data with indices[" << all_data->indices->size() 
    << "], input_mask[" << all_data->input_mask->size() 
    << "], positions[" << all_data->positions->size()
    << "], segments[" << all_data->segments->size()
    << "], out_Squad_Gemm[" << all_data->out_Squad_Gemm->size() 
    << "]" << std::endl; 
}

void inference(int start, int count, in_out_data* all_data){
  //clock_t startTime,endTime;
  //auto start_t = std::chrono::steady_clock::now();
  for(int i=start; i < start + count; i++){
    //if(i == 10 + start)  //as batch per step is 10, this 1 will pass 10 inputs
    //  start_t = std::chrono::steady_clock::now();
    in_out_data* data = (all_data)+i;
    // std::cout << "First data with indices[" << data->indices->size() 
    // << "], input_mask[" << data->input_mask->size() 
    // << "], positions[" << data->positions->size()
    // << "], segments[" << data->segments->size()
    // << "], out_Squad_Gemm[" << data->out_Squad_Gemm->size() 
    // << "]" << std::endl;
	  model(data->indices->data(), data->input_mask->data(), data->positions->data(), 
         data->segments->data(), data->out_Squad_Gemm->data());
  }
  //auto end = std::chrono::steady_clock::now();
  //std::chrono::duration<double> elapsed_seconds = end-start_t;
  //std::cout << "The total run time includiing compile is: " << elapsed_seconds.count() << "s" << std::endl;
  //model_fini();
}

#define THREAD_COUNT 20

int main(){

  prepare_data();
  bool single_thread = false;

  auto start = std::chrono::steady_clock::now();
  if(single_thread){
    for (int step=0; step<TOTAL_DATA_NUM; step++){
      in_out_data* data = all_data+step;
	    if(100 == step)
		    start = std::chrono::steady_clock::now();
      model(data->indices->data(), data->input_mask->data(), data->positions->data(), 
            data->segments->data(), data->out_Squad_Gemm->data());
	  }
  }
  else{
    std::thread threads[THREAD_COUNT];
    int start_index = 0;
    int count = TOTAL_DATA_NUM/THREAD_COUNT;
    for(int i=0; i < THREAD_COUNT; i++){
      threads[i] = std::thread(inference, start_index, count, all_data);
      //std::this_thread::sleep_for(std::chrono::seconds(3));
      std::cout << "sleep for 3 second for each thread" << std::endl;
      start_index += count;
    }
    cout << "Threads started, wait for all threads end." << std::endl;
    //std::this_thread::sleep_for(std::chrono::seconds(10));
    for(int i=0; i < THREAD_COUNT; i++){
      threads[i].join();
    }
  }
  std::cout << "All threads ended, please press enter to continue..." << std::endl;
  char a;
  std::cin >> a;
  auto end = std::chrono::steady_clock::now();
  std::chrono::duration<double> elapsed_seconds = end-start;
  std::cout << "The total run time including compile is: " << elapsed_seconds.count() << "s" << std::endl;
  model_fini();
}