name: Testing (X86_64, GPU)

on:
  push:
    branches-ignore:
      - "web"
  pull_request:
    branches-ignore:
      - "web"
  release:
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: halo
          submodules: recursive
          clean: false
      - name: Lint
        uses: DoozyX/clang-format-lint-action@v0.11
        with:
          source: "./halo"
          exclude: "./halo/third_party ./halo/external ./halo/ODLA/external"
          clangFormatVersion: 9
          style: file
      - name: Check markdown for broken links
        uses: ruzickap/action-my-markdown-link-checker@v1
        with:
          config_file: ./halo/.github/workflows/mlc_config.json
          exclude: |
            external/
            .github/

  build:
    runs-on: [self-hosted, gpu]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: halo
          submodules: recursive
      - name: Build
        uses: ./halo/.github/actions/build
        with:
          docker_image_variant: cuda10.0-cudnn7
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: ${{runner.workspace}}/heterogeneity-aware-lowering-and-optimization/build/*.bz2
          if-no-files-found: error

  publish_images:
    runs-on: [self-hosted, gpu]
    needs: build
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: halo
          clean: false

      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: download

      - name: Prepare
        id: prepare
        run: |
          echo "::set-output name=file::$(cd download && ls HALO-*.bz2)"
          echo "::set-output name=date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          tag=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            tag=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            tag=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$tag" ]; then
              tag=latest
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            tag=pr-${{ github.event.number }}
          fi
          echo ::set-output name=tag::${tag}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Aliyun
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ALIYUN_CR_VPC }}
          username: ${{ secrets.ALIYUN_CR_USER }}
          password: ${{ secrets.ALIYUN_CR_PWD }}

      - name: Build X86_64 Runtime Images
        uses: docker/build-push-action@v2
        with:
          file: halo/utils/docker/runtime/Dockerfile.x86_64
          context: download
          tags: |
            localhost:5000/halo:sha-${{ github.sha }}
            registry-intl.us-west-1.aliyuncs.com/computation/halo:${{steps.prepare.outputs.tag}}-runtime.x86_64-ubuntu18.04
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            BASE_IMAGE=ubuntu:18.04
            HALO_PKG=${{ steps.prepare.outputs.file }}
          labels: |
            halo.name:runtime.x86_64
            halo.build-date:${{ steps.prepare.outputs.date }}
            halo.vcs_url:${{ github.repository }}
            halo.vcs_ref:${{ github.ref }}
            halo.vcs_sha:${{ github.sha }}
      - name: Test
        run: |
          docker inspect localhost:5000/halo:sha-${{ github.sha }}
          docker run --rm localhost:5000/halo:sha-${{ github.sha }} --version
          docker rmi localhost:5000/halo:sha-${{ github.sha }}
          docker image prune -f
