name: Testing (X86_64, GPU)

on:
  push:
    branches-ignore:
      - "web"
  pull_request:
    branches-ignore:
      - "web"
  release:
jobs:
  lint-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: halo
          submodules: recursive
          clean: false
      - name: Lint
        uses: DoozyX/clang-format-lint-action@v0.11
        with:
          source: "./halo"
          exclude: "./halo/third_party ./halo/external ./halo/ODLA/external ./halo/ODLA/platforms/odla_popart/custom_ops"
          clangFormatVersion: 9
          style: file
      - name: Check markdown for broken links
        uses: ruzickap/action-my-markdown-link-checker@v1
        with:
          config_file: ./halo/.github/workflows/mlc_config.json
          exclude: |
            external/
            .github/
            third_party/

  build_ubuntu:
    runs-on: [self-hosted, gpu]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: halo
          submodules: recursive

      - name: Build
        uses: ./halo/.github/actions/build
        with:
          docker_image_variant: cuda10.0-cudnn7

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: |
            ${{runner.workspace}}/heterogeneity-aware-lowering-and-optimization/output_ubuntu/*.bz2
          if-no-files-found: error

  build_centos7:
    runs-on: [self-hosted]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: halo
          submodules: recursive

      - name: Build
        run: |
          mkdir -p /tmp/centos.cache
          rm -fr ${{runner.workspace}}/$repo_name/output_centos
          mkdir -p ${{runner.workspace}}/$repo_name/output_centos
          docker pull $image_registry/computation/halo:$image_tag
          docker run --rm -v /tmp/centos.cache:/cache --tmpfs /build:exec --user=$UID:$GID \
            -v $poplar_sdk:/opt/poplar_sdk:ro \
            -v ${{runner.workspace}}/$repo_name:/host \
            $image_registry/computation/halo:$image_tag \
            /bin/bash -c 'source scl_source enable devtoolset-7 && cd /build && cmake -G Ninja /host/halo -DHALO_USE_TIDY_CHECK=OFF -DHALO_GEN_DOCS=OFF -DODLA_BUILD_POPART_USE_CXX11ABI=OFF -DODLA_BUILD_POPART_CUSTOM_OPS=ON -DODLA_BUILD_TRT=OFF -DODLA_BUILD_XNNPACK=OFF -DODLA_BUILD_EIGEN=OFF -DODLA_BUILD_DNNL=OFF -DHALO_BUILD_RTLIB=OFF -DHALO_USE_STATIC_PROTOBUF=ON -DCPACK_SYSTEM_NAME=centos-i686 && ninja && source /opt/poplar_sdk/poplar-centos_7_6-2.2.0+166880-feb7f3f2bb/enable.sh && ninja check-halo && ninja package && cp /build/*.bz2 /build/*.rpm /host/output_centos'
        env:
          poplar_sdk: /opt/poplar_sdk-centos_7_6-2.2.0+688-7a4ab80383
          repo_name : heterogeneity-aware-lowering-and-optimization
          image_registry : registry-intl.us-west-1.aliyuncs.com
          image_tag : latest-devel-x86_64-centos7

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: |
            ${{runner.workspace}}/heterogeneity-aware-lowering-and-optimization/output_centos/*.bz2
            ${{runner.workspace}}/heterogeneity-aware-lowering-and-optimization/output_centos/*.rpm
          if-no-files-found: error

  publish_images:
    runs-on: [self-hosted]
    needs: [build_ubuntu, build_centos7]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: halo
          clean: false

      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: /tmp/download

      - name: Prepare
        id: prepare
        run: |
          echo "::set-output name=file::$(cd /tmp/download && ls HALO-*-ubuntu*.bz2)"
          echo "::set-output name=date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          tag=latest
          if [[ $GITHUB_REF == refs/tags/Release/* ]]; then
            tag="Release-${GITHUB_REF#refs/tags/Release/}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            tag=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            tag=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$tag" ]; then
              tag=latest
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            tag=pr-${{ github.event.number }}
          fi
          echo ::set-output name=tag::${tag}

      - name: Login to aliyun
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ALIYUN_CR_VPC }}
          username: ${{ secrets.ALIYUN_CR_USER }}
          password: ${{ secrets.ALIYUN_CR_PWD }}

      - name: Build x86_64 runtime images
        uses: docker/build-push-action@v2
        with:
          file: halo/utils/docker/runtime/Dockerfile.x86_64
          context: /tmp/download
          tags: |
            localhost:5000/halo:sha-${{ github.sha }}
            registry-intl.us-west-1.aliyuncs.com/computation/halo:${{steps.prepare.outputs.tag}}-runtime.x86_64-ubuntu18.04
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            BASE_IMAGE=ubuntu:18.04
            HALO_PKG=${{ steps.prepare.outputs.file }}
          labels: |
            halo.name:runtime.x86_64
            halo.build-date:${{ steps.prepare.outputs.date }}
            halo.vcs_url:${{ github.repository }}
            halo.vcs_ref:${{ github.ref }}
            halo.vcs_sha:${{ github.sha }}
      - name: Test
        run: |
          docker inspect localhost:5000/halo:sha-${{ github.sha }}
          docker run --rm localhost:5000/halo:sha-${{ github.sha }} --version
          docker rmi localhost:5000/halo:sha-${{ github.sha }}
          docker image prune -f

      - name: Publish release artifacts
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: /tmp/download/*
          name: ${{ steps.prepare.tag }}
