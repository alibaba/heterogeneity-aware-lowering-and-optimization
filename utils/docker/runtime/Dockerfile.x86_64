ARG BASE_IMAGE

# Build Protobuf
FROM gcc:7.5.0 AS pb_builder
WORKDIR /tmp
RUN git clone --depth=1 https://github.com/protocolbuffers/protobuf.git -b v3.9.1 && \
    cd protobuf && ./autogen.sh && \
    ./configure --prefix=/tmp/install && make clean && \
    make -j && make install && \
    tar -cf /tmp/protobuf.tar ../install --transform 's,^install/,/usr/local/,'

# Build Flatbuffer
FROM rikorose/gcc-cmake:gcc-7 AS fb_builder
WORKDIR /tmp
RUN git clone --depth=1 https://github.com/google/flatbuffers.git -b v1.12.0 && \
    cd flatbuffers && \
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/tmp/install -DFLATBUFFERS_BUILD_SHAREDLIB=ON && \
    make -j && make install && \
    tar -cf /tmp/flatbuffer.tar ../install --transform 's,^install/,/usr/local/,'

# Build DNNL
FROM rikorose/gcc-cmake:gcc-7 AS dnnl_builder
WORKDIR /tmp
RUN git clone --depth=1 https://github.com/oneapi-src/oneDNN.git --branch v1.7 && \
    cd oneDNN && \
    cmake -G "Unix Makefiles" -DDNNL_BUILD_EXAMPLES=OFF -DDNNL_BUILD_TESTS=OFF \
          -DDNNL_ENABLE_PRIMITIVE_CACHE=ON -DCMAKE_INSTALL_PREFIX=/tmp/install && \
    make -j install && \
    tar -cf /tmp/dnnl.tar ../install --transform 's,^install/,/opt/dnnl/,'


FROM ${BASE_IMAGE}

WORKDIR /pkg
COPY --from=pb_builder /tmp/protobuf.tar .
RUN tar xf /pkg/protobuf.tar -C /

COPY --from=fb_builder /tmp/flatbuffer.tar .
RUN tar xf /pkg/flatbuffer.tar -C /

WORKDIR /tmp
COPY --from=dnnl_builder /tmp/dnnl.tar .
RUN tar xf ./dnnl.tar -C / && rm -fr /tmp/*

# Install clang tools
ARG LLVM_VERSION=9
RUN apt-get update && apt-get -y --no-install-recommends install \
    ca-certificates wget gnupg && rm -fr /var/lib/apt/lists/*
RUN echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${LLVM_VERSION} main" >> /etc/apt/sources.list.d/llvm.list
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add
RUN apt-get update && apt install -y clang-format-${LLVM_VERSION} && \
    apt-get clean && apt-get purge && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN echo "/usr/local/lib" >> /etc/ld.so.conf && ldconfig

# Install HALO
ARG HALO_PKG
WORKDIR /tmp
COPY ${HALO_PKG} .
RUN rm -fr /opt/halo && mkdir -p /opt/halo && \
    tar jxf ${HALO_PKG} -C /opt/halo --strip-components=1 && \
    rm /tmp/*
ENV PATH="${PATH}:/opt/halo/bin"
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/halo/lib"
SHELL ["/bin/bash", "-c"]

WORKDIR /root
ENTRYPOINT ["/opt/halo/bin/halo"]